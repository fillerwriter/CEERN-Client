<?php

define('CEEN_MAPPING_INCOMING', 'incoming');

define('CEEN_MAPPING_OUTGOING', 'outgoing');

/**
 * Implements hook_menu()
 */

function ceenclient_menu() {
  $items = array();
  
  $items['ceen'] = array(
    'title'             => 'CEEN',
    'description'       => 'Test',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'ceenclient_ceen',
  );
  
  $items['admin/settings/ceen'] = array(
    'title'             => 'CEERN Credentials',
    'description'       => 'CEEN settings.',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceenclient_admin_settings'),
  );
  
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . str_replace('_', '-', $node_type) . '/ceern_mapping'] = array(
      'title' => 'CEERN Data Mapping',
      'access callback' => 'ceenclient_mapping_access_callback',
      'access arguments' => array($node_type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ceenclient_mapping_form', $node_type),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }
      
  return $items;
}

function ceenclient_ceen() {
  ceenclient_load_updates();
}

/**
 * Loads mapper info from various modules.
 */

function ceenclient_load_mapper_info() {
  $mappers = array();
  foreach (module_implements('ceen_mapping') as $module) {
    $function = $module . '_ceen_mapping';
    $data = $function();
    
    foreach ($data as $key => $value) {
      $mappers[$key] = $value;
    }
  }
  
  return $mappers;
}

/**
 * Implements hook_ceen_mapping().
 */
 
function ceenclient_ceen_mapping() {
  return array(
    'CeenIncomingDefault' => array(
      'name' => 'Default',
      'file' => 'IncomingDefault.inc',
      'path' => drupal_get_path('module', 'ceenclient') . '/includes',
      'direction' => CEEN_MAPPING_INCOMING,
    ),
    'CeenOutgoingDefault' => array(
      'name' => 'Default',
      'file' => 'OutgoingDefault.inc',
      'path' => drupal_get_path('module', 'ceenclient') . '/includes',
      'direction' => CEEN_MAPPING_OUTGOING,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
 
function ceenclient_menu_alter(&$form) {
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . $node_type]['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Implements hook_flush_caches().
 */

function ceenclient_flush_caches() {
  return array('cache_ceenclient');
}

/**
 * Access callback for mapping.
 *
 * @TODO: Add a permission to check on in addition to content type flag.
 */

function ceenclient_mapping_access_callback($node_type) {
  return variable_get('ceern_save_to_api_'. $node_type, 0);
}

/**
 * Mapping form callback.
 */
 
function ceenclient_mapping_form(&$form_state, $node_type) {  
  $form = array();
  
  return $form;
}

/**
 * Submit handler for mapping form.
 */
 
function ceenclient_mapping_form_submit($form, &$form_state) {
  drupal_set_message('Mapping settings saved.');
}

function ceenclient_admin_settings() {
  $form = array();
  
  $form['ceenclient_service_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Service URL'),
    '#default_value' => variable_get('ceenclient_service_url', ''),
  );
  
  $form['ceenclient_service_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Public Key'),
    '#default_value' => variable_get('ceenclient_service_public_key', ''),
  );
  
  $form['ceenclient_service_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Private Key'),
    '#default_value' => variable_get('ceenclient_service_private_key', ''),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_user().
 */
 
function ceenclient_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'insert' || $op == 'update') {

  } elseif ($op == 'delete') {

  } elseif ($op == 'load') {
    $account->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $account->uid));
  }
}

/**
 * Implementation of hook_nodeapi().
 */

function ceenclient_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (variable_get('ceen_save_to_api_' . $node->type, FALSE)) {
    $is_new = FALSE;
    switch ($op) {
      case 'load':
        $node->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d && object = "node"', $node->nid));
      break;
      case 'insert':
        $is_new = TRUE;
        // intentional dropthrough.
      case 'update':
        if (!isset($node->ceen_from_api)) {
          // Include mapping classes.
          $map_class = variable_get('ceenclient_outgoing_' . $node->type, '');
          
          // include base file first.
          include_once('./' . drupal_get_path('module', 'ceenclient') . '/includes/CeenProcess.inc');
          $mappers = ceenclient_load_mapper_info();
          include_once('./' . $mappers[$map_class]['path'] . '/' . $mappers[$map_class]['file']);
          
          $mapper = new $map_class();
          $resource = array();
          
          $mapper->process($node, $resource);
          
          $resource_call_type = 'PUT';
          if ($is_new) {
            $resource_call_type = 'POST';
          }
          
          ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource', $resource, $resource_call_type);
        }
      break;
      case 'delete':
        if (!isset($node->ceen_from_api)) {
          ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource/' . $node->ceen_uuid, 'DELETE');
          db_query('DELETE FROM {ceenapi_to_object} WHERE oid = %d && object = "node" LIMIT 1', $node->nid);
        }
      break;
    }
  }
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function ceenclient_views_api() {
  return array('api' => 2.0);
}

/**
 * Implementation of hook_form_alter().
 *
 * Handles adjustment to node type form for ConEd integration.
 */
function ceenclient_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    // Content type form.
    $form['ceen'] = array(
      '#type' => 'fieldset',
      '#title' =>'ConEd API Integration',
    ); 
    
    $form['ceen']['ceen_save_to_api'] = array(
      '#type' => 'checkbox',
      '#title' => t('Sync with API?'),
      '#description' => 'Should this content type be synced with the general API?',
      '#default_value' => variable_get('ceen_save_to_api_' . $form['#node_type']->type, 0),
    );
    
    $form['ceen']['ceen_additional_parameters'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional Parameters'),
      '#description' => 'Additional Search parameters. Used to filter out resources.',
      '#default_value' => variable_get('ceen_additional_parameters_' . $form['#node_type']->type, ''),
    );
    
    $incoming_options = $outgoing_options = array(
      '' => '<none>',
    );
    
    $mappers = ceenclient_load_mapper_info();
    
    foreach ($mappers as $key => $map) {
      if ($map['direction'] == CEEN_MAPPING_INCOMING) {
        $incoming_options[$key] = $map['name'];      
      } elseif ($map['direction'] == CEEN_MAPPING_OUTGOING) {
        $outgoing_options[$key] = $map['name'];
      }
    }
    
    $form['ceen']['ceenclient_incoming'] = array(
      '#type' => 'select',
      '#title' => t('Incoming'),
      '#options' => $incoming_options,
      '#default_value' => variable_get('ceenclient_incoming_' . $form['#node_type']->type, 'CeenIncomingDefault'),
    );
    
    $form['ceen']['ceenclient_outgoing'] = array(
      '#type' => 'select',
      '#title' => t('Outgoing'),
      '#options' => $outgoing_options,
      '#default_value' => variable_get('ceenclient_outgoing_' . $form['#node_type']->type, 'CeenOutgoingDefault'),
    );
  }
  else if (preg_match('/_node_form$/', $form_id)) {
    if (variable_get('ceen_save_to_api_'. $form['#node']->type, FALSE)) {
      /**
       * @TODO: Do we want to handle resource types as a custom field on our own, or just rely on CCK?
       */
    }
  }
}

/**
 * Requests data from CEEN. Adds authentication automatically.
 *
 * @param $uri
 *   URI of request. http://example.com/services/rest/resource/1
 * @param $params
 *   Keyed array of parameters to add to uri.
 *
 * @return
 *   A data object from CEEN.
 */

function ceenclient_resource_call($uri, $params = array(), $method = 'GET') {
  static $ceenclient_api_calls;
  watchdog('CEERN Debugging', 'API Call ' . $method . ' ' . $uri . " <pre>" . print_r($params, true) . "</pre>", array(), WATCHDOG_DEBUG);
  
  $key = $uri . '?' . drupal_query_string_encode($params);
  
  // Check for cache first.
  if ($method == 'GET') {
    if (isset($ceenclient_api_calls[$key])) {
      return $ceenclient_api_calls[$key];
    }
    
    if ($data = cache_get($key, 'cache_ceenclient')) {
      return $data->data;
    }
  }
  
  $public_key = variable_get('ceenclient_service_public_key', '');
  $private_key = variable_get('ceenclient_service_private_key', '');
  $nonce = uniqid(mt_rand());
  $timestamp = time();
  
  $hash_parameters = array($timestamp, $public_key, $nonce);
  $hash = hash_hmac("sha256", implode(';', $hash_parameters), $private_key);
  
  $url_args = array();
  $data = NULL;
  
  if (strtoupper($method) == 'GET') {
    $url_args += $params;
  } else {
    $data = serialize($params);
  }
  
  $url_args['hash'] = $hash;
  $url_args['timestamp'] = $timestamp;
  $url_args['public_key'] = $public_key;
  $url_args['nonce'] = $nonce;
  
  $headers = array(
    'Content-Type' => 'application/vnd.php.serialized',
    'Accept' => 'application/vnd.php.serialized',
  );

  // Automatically add .php to end of uri to ensure data comes back in expected format.
  $request = drupal_http_request($uri . '.php?' . drupal_query_string_encode($url_args), $headers, strtoupper($method), $data);
  watchdog('CEERN Debugging', 'API Return <pre>' . print_r($request, true) . '</pre>', array(), WATCHDOG_DEBUG);
  
  $return_data = unserialize($request->data);
  
  // save to our caches.
  if ($method == 'GET') {
    $ceenclient_api_calls[$key] = $return_data;
    cache_set($key, $return_data, 'cache_ceenclient', CACHE_TEMPORARY);
  }
  
  return $return_data;
}

/**
 * Implementation of hook_cron().
 */
 
function ceenclient_cron() {
  /**
   * @TODO: Load content from API.
   */
   ceen_load_updates();
}

/**
 * Takes a user, saves it to API.
 *
 * @param $account
 *   User account object.
 */
 
function ceenclient_save_user($account) {
  /**
   * @TODO: Use Content Profile for extra data about our users.
   */
  $api_user_object = array(
    'first_name' => $account->name,
    'last_name' => " ",
    'contact' => array(
      'mail' => $account->mail,
    ), 
  );
  
  $resource_url = '/user';
  $resource_call_type = 'POST';
    
  if ($account->ceen_uuid) {
    $resource_url .= "/" . $account->ceen_uuid;
    $resource_call_type = 'PUT';
  }
  
  $return = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . $resource_url, $api_user_object, $resource_call_type);
  
  if (!$return) {
    drupal_set_message(t("Error saving user to CEERN API"), 'error');
  } else {
    $update = array();
  
    $ceen_data = array('oid' => $account->uid, 'object' => 'user', 'uuid' => $return->uuid);
  
    if ($account->ceen_uuid != NULL) {
      $update = 'oid';
      unset($ceen_data['oid']);
    }
    
    drupal_write_record('ceenapi_to_object', $ceen_data, $update);
  }
}

/**
 * Generic function for loading sets of resources from API.
 *
 * To be used primarily with hook_cron(), but could potentially use elsewhere. Action? Page callback to load manually?
 */
 
function ceenclient_load_updates() {
  /**
   * Pseudo: 
   * - Load list of content types that need to be synced with api. 
   * - Load a value that represents last updated time.
   * - Grab data list from API for each content type.
   * - Run through list. Add/update/delete items as necessary.
   */
  
  $max_count = variable_get('ceenclient_api_max_batch_count', 50);
  
  $node_types = node_get_types('types');
  
  foreach ($node_types as $node_type) {
    if (variable_get('ceen_save_to_api_' . $node_type->type, 0) == 1) {
      // Include mapping classes.
      $map_class = variable_get('ceenclient_incoming_' . $node_type->type, '');
      
      // include base file first.
      include_once('./' . drupal_get_path('module', 'ceenclient') . '/includes/CeenProcess.inc');
      $mappers = ceenclient_load_mapper_info();
      include_once('./' . $mappers[$map_class]['path'] . '/' . $mappers[$map_class]['file']);
      
      $mapper = new $map_class();
    
      $last_update = variable_get('ceenclient_api_last_update_' . $node_type->type, 0);
      $additional_parameters_string = variable_get('ceen_additional_parameters_' . $node_type->type, '');
      
      $additional_parameters_components = explode('&', $additional_parameters_string);
      $additional_parameters = array();
      
      foreach($additional_parameters_components as $component) {
        $component_parts = explode('=', $component);
        $additional_parameters[$component_parts[0]] = $component_parts[1];
      }
      
      $default_parameters = array(
        'status' => 1, 
        'sort' => 'update', 
        'update' => $last_update,
      );
      
      $parameters = array_merge($default_parameters, $additional_parameters);
            
      $data = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource', $parameters);
            
      foreach ($data['resources'] as $resource) {
        $resource_data = ceenclient_resource_call($resource['uri']);
        
        $is_new = FALSE;
        $node = new stdClass();
        
        switch ($resource['status']) {
          case 'PUBLISHED':
            $node->type = $node_type->type;
            module_load_include('inc', 'node', 'node.pages');
            node_object_prepare($node);
                        
            $is_new = TRUE;
            
          // Intentional dropthrough.
          case 'UPDATED':
            if (!$is_new) {
              $node = ceenclient_node_load_uuid($resource['uuid']);
            }
            
            $mapper->process($resource_data, $node);
            $node->ceen_from_api = TRUE; // To keep an endless loop from happening in hook_api.
            node_save($node);
            
            if ($is_new) {
              db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "node", "%s")', $node->nid, $resource_data['uuid']);
            }
                        
            variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
          break;
          case 'DELETED':
            $node = ceenclient_node_load_uuid($resource['uuid']);
            node_delete($node->nid);
            variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
          break;
        }
      }
    }
  }
}

/**
 * Converts a node object into a resource array.
 *
 * @param $node
 *   - node object. 
 */

function ceenclient_node_to_resource($node) {
  if (is_object($node) && isset($node->type)) {
    $resource = array();
    if (module_exists('ygo_event') && $node->type == 'event') {
      $resource = array(
        'title' => $node->title,
        'description' => $node->body,
        'type' => 'Event',
        'time' => array(
          'start' => $node->field_event_time[0]['value'],
          'end' => $node->field_event_time[0]['value2'],
        ),
        'location' => array(
          'name' => $node->field_event_location[0]['name'],
          'street' => $node->field_event_location[0]['street'],
          'additional' => $node->field_event_location[0]['additional'],
          'city' => $node->field_event_location[0]['city'],
          'state' => $node->field_event_location[0]['province'],
          'zip' => $node->field_event_location[0]['postal_code'],
        ),
        'contact' => array(
          'name' => $node->field_contact_name[0]['value'],
          'email' => $node->field_contact_email[0]['email'],
          'url' => $node->field_contact_website[0]['url'],
          'phone' => $node->field_contact_phone[0]['value'],
        ),
      ); 
      return $resource;
    } elseif (module_exists('ceern_resource_feature') && $node->type == 'ceen_resource') {
      $resource = array(
        'title' => $node->title,
        'description' => $node->body,
        'type' => $node->field_resource_type[0]['value'],
        'time' => array(
          'start' => $node->field_time[0]['value'],
          'end' => $node->field_time[0]['value2'],
        ),
        'prerequisites' => $node->field_prerequisites[0]['value'],
        'location' => array(
          'name' => $node->field_location[0]['name'],
          'street' => $node->field_location[0]['street'],
          'additional' => $node->field_location[0]['additional'],
          'city' => $node->field_location[0]['city'],
          'state' => $node->field_location[0]['province'],
          'zip' => $node->field_location[0]['postal_code'],
        ),
        'language' => $node->field_lang[0]['value'],
        'contact' => array(
          'name' => $node->field_contact_name[0]['value'],
          'email' => $node->field_contact_email[0]['email'],
          'url' => $node->field_contact_website[0]['url'],
          'phone' => $node->field_contact_phone[0]['value'],
        ),
        'education_continuum' => $node->field_edu_continuum[0]['value'],
        'fair_usage' => $node->field_fair_usage[0]['value'],
      );
      
      return $resource;
    } else {    
      $fields = array();
      if (module_exists('content')) {
        $fields = content_fields(NULL, $node->type);
      }
    
      $mapping = variable_get('ceern_mapping_' . $node_type->type, '');
    
      $resource = array();
    
      foreach ($mapping as $map_key => $map_value) {
        if ($map_value != '<none>') {
          /**
           * Check special cases first.
           */
          if ($map_key == 'title' || $map_key == 'body') {
            _ceenclient_resource_object_map($resource, $node, $map_key, $map_value);
          } elseif ($map_key == 'node_created') {
            _ceenclient_resource_object_map($resource, $node, $map_key, $map_value);
          } elseif (module_exists('content')) {
            if (!empty($fields[$map_key]['type'])) {
              switch ($fields[$map_key]['type']) {
                default:
                  if ($fields[$map_key]['multiple']) {
                    $resource[$map_value] = array();
                    foreach ($node->$map_key as $key) {
                      array_push($resource[$map_value], $key['value']);
                    }
                  } else {
                    $resource[$map_value] = $node->$map_key[0]['value'];
                  }
                break;
              }
            }      
          }
        }
      }
      
      return $resource;
    }
  }
}

/**
 * Helper function for node_to_resource.
 */

function _ceenclient_resource_object_map(&$resource, $node, $map_key, $map_value) {
  if (strpos($map_value, 'contact_') !== FALSE) {
    $value = str_replace('contact_', '', $map_value);
    $resource['contact'][$value] = $node->$map_key;
  } elseif (strpos($map_value, 'location_') !== FALSE) {
    $value = str_replace('location_', '', $map_value);
    $resource['location'][$value] = $node->$map_key;
  } else {
    $resource[$map_value] = $node->$map_key;
  }
}

/**
 * Retrieves ceern uuid for a user. If nothing's passed in, default to current user.
 */
 
function ceenclient_user_uuid($uid = -1) {
  global $user;
  
  if ($uid < 0) {
    $uid = $user->uid;
  }
  
  return db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $uid));
}

/**
 * Retrieves node based on uuid.
 */
 
function ceenclient_node_load_uuid($uuid) {
  $nid = db_result(db_query('SELECT oid FROM {ceenapi_to_object} WHERE uuid = "%s" AND object = "node"', $uuid));
  return node_load($nid);
}