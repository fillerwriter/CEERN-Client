<?php

/**
 * Implements hook_menu()
 */

function ceenclient_menu () {
  $items = array();
  
  $items['admin/settings/ceen'] = array(
    'title'             => 'CEERN Credentials',
    'description'       => 'CEEN settings.',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceenclient_admin_settings'),
  );
  
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . str_replace('_', '-', $node_type) . '/ceern_mapping'] = array(
      'title' => 'CEERN Data Mapping',
      'access callback' => 'ceenclient_mapping_access_callback',
      'access arguments' => array($node_type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ceenclient_mapping_form', $node_type),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }
  
  $items['test'] = array(
    'title'             => 'Test page',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'ceenclient_load_updates',
  );
      
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
 
function ceenclient_menu_alter(&$form) {
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . $node_type]['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Access callback for mapping.
 *
 * @TODO: Add a permission to check on in addition to content type flag.
 */

function ceenclient_mapping_access_callback($node_type) {
  return variable_get('ceern_save_to_api_'. $node_type, 0);
}

/**
 * Mapping form callback.
 */
 
function ceenclient_mapping_form(&$form_state, $node_type) {  
  $mapping = variable_get('ceern_mapping_'. $node_type, array());
  
  $mapping_options = array(
    '<none>' => '<none>',
    'title' => 'Title',
    'description' => 'Description',
    'time_start' => 'Time Start',
    'time_end' => 'Time End',
  );
  
  $form['map_title'] = array(
    '#title' => 'Node Title',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['title']) ? $mapping['title'] : '<none>',
  );
  
  $form['map_body'] = array(
    '#title' => 'Node Body',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['body']) ? $mapping['body'] : '<none>',
  );
  
  $form['map_node_created'] = array(
    '#title' => 'Node Created',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['node_created']) ? $mapping['node_created'] : '<none>',
  );
  
  $form['node_type'] = array(
    '#type' => 'value',
    '#value' => $node_type,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Submit handler for mapping form.
 */
 
function ceenclient_mapping_form_submit($form, &$form_state) {
  $mapping = array();
  
  foreach($form_state['values'] as $key => $value) {
    if (preg_match('/^map_/', $key)) {
      $item_name = preg_replace('/^map_/', '', $key);
      $mapping[$item_name] = $value;
    }
  }
  
  variable_set('ceern_mapping_' . $form_state['values']['node_type'], $mapping);
}

function ceenclient_admin_settings() {
  $form = array();
  
  $form['ceenclient_service_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Service URL'),
    '#default_value' => variable_get('ceenclient_service_url', ''),
  );
  
  $form['ceenclient_service_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Public Key'),
    '#default_value' => variable_get('ceenclient_service_public_key', ''),
  );
  
  $form['ceenclient_service_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Private Key'),
    '#default_value' => variable_get('ceenclient_service_private_key', ''),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_user().
 */
 
function ceenclient_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'insert' || $op == 'update') {
    /**
     * TODO: Not sure if this will work once we get content_profile involved, but for now it should.
     */
    $to_api = (array) $account;
    $to_api = array_merge($to_api, $edit);
    unset($to_api['pass']);
    $to_api = (object) $to_api;
    ceenclient_save_user($to_api);
  } else if ($op == 'delete') {
    ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/user/' . $account->ceen_uuid, NULL, 'DELETE');
  } else if ($op == 'load') {
    $account->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $account->uid));
  }
}

/**
 * Implementation of hook_nodeapi().
 */

function ceenclient_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (variable_get('ceern_save_to_api_'. $node->type, FALSE) != FALSE && empty($node->ceern_from_api)) {
        ceenclient_save_node($node);
      }
    break;
  }
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function ceenclient_views_api() {
  return array('api' => 2.0);
}

/**
 * Implementation of hook_form_alter().
 */
function ceenclient_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    // Content type form.
    $form['ceern'] = array(
      '#type' => 'fieldset',
      '#title' =>'ConEd API Integration',
    ); 
    
    $form['ceern']['ceern_save_to_api'] = array(
      '#type' => 'checkbox',
      '#title' => 'Sync with API?',
      '#description' => 'Should this content type be synced with the general API?',
      '#default_value' => variable_get('ceern_save_to_api_'. $form['#node_type']->type, 0),
    );
  } else if (preg_match('/_node_form$/', $form_id)) {
    if (variable_get('ceern_save_to_api_'. $form['#node']->type, FALSE)) {
      $form['ceern_type'] = array(
        '#type' => 'fieldset',
        '#title' => t('CEERN'),
        '#collapsible' => TRUE,
      );
      
      $resource_types_raw = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource_types');
      $resource_types = array();
      foreach($resource_types_raw as $key => $major_group) {
        $set = array();
        foreach($major_group['children'] as $key_2 => $minor_group) {
          $set[$minor_group['name']] = $minor_group['name'];
        }
        $resource_types[$major_group['name']] = $set;
      }
      
      // @TODO: Save the resource type to our database.
      $form['ceern_type']['resource_type'] = array(
        '#type' => 'select',
        '#title' => t('Resource Type'),
        '#options' => $resource_types,
      );
    }
  }
}

/**
 * Takes a node object, send it to CEEN.
 *
 * @param object node
 *   the node object
 * TODO: remove module specific code, make mapping generic.
 */
 
function ceenclient_save_node($node) {
  global $base_url;
  
  /**
   * Initial stab at mapping. Preserve the old logic as a fallback. Once mapping is stable, leave default mapping, but drop module-specific mapping.
   */
   
  $resource = array(
    'canonical_url' => $base_url . '/node/' . $node->nid,
    'user' => ceenclient_user_uuid($node->uid),
  );
  
  $mapping = variable_get('ceern_mapping_' . $node->type, false);
  
  if ($mapping != false) {
    $node_array = (array) $node;
        
    foreach($mapping as $key => $map) {
      if ($map != '<none>') {
        $resource[$map] = $node_array[$key];
      }
    }
    
    $resource['type'] = $node_array['resource_type'];
    
  } else {
    // Since we're storing our data in a feature, save what we can vanilla, check for other module presence, then add rest of data to object.
    $resource = array_merge($resource, array(
      'title' => $node->title,
    	'description' => $node->body,
    	'fair_usage' => TRUE, // We default to TRUE when we're not using the feature.
    ));
  
    if (module_exists('ygo_event') && $node->type == 'event') {
      $resource_additions = array(
        'type' => 'Event',
        'time' => array(
          'start' => $node->field_event_time[0]['value'],
    		  'end' => $node->field_event_time[0]['value2'],
        ),
        'location' => array(
    		  'name' => $node->field_event_location[0]['name'],
    		  'street' => $node->field_event_location[0]['street'],
    		  'additional' => $node->field_event_location[0]['additional'],
    		  'city' => $node->field_event_location[0]['city'],
    		  'state' => $node->field_event_location[0]['province'],
    		  'zip' => $node->field_event_location[0]['postal_code'],
    	  ),
    	  'contact' => array( 
    		  'name' => $node->field_contact_name[0]['value'],
    		  'email' => $node->field_contact_email[0]['email'],
    		  'url' => $node->field_contact_website[0]['url'],
    		  'phone' => $node->field_contact_phone[0]['value'],
    	  ),
      );
      
      $resource = array_merge($resource, $resource_additions);
    }
  
    if (module_exists('ceern_resource_feature') && $node->type == 'ceen_resource') {
      $resource_additions = array(
    	  'type' => $node->field_resource_type[0]['value'],
    	  'time' => array(
    	    'start' => $node->field_time[0]['value'],
    		  'end' => $node->field_time[0]['value2'],
    	  ),
    	  'prerequisites' => $node->field_prerequisites[0]['value'],
    	  'location' => array(
    		  'name' => $node->field_location[0]['name'],
    		  'street' => $node->field_location[0]['street'],
    		  'additional' => $node->field_location[0]['additional'],
    		  'city' => $node->field_location[0]['city'],
    		  'state' => $node->field_location[0]['province'],
    		  'zip' => $node->field_location[0]['postal_code'],
    	  ),
    	  'language' => $node->field_lang[0]['value'],
    	  'contact' => array( 
    		  'name' => $node->field_contact_name[0]['value'],
    		  'email' => $node->field_contact_email[0]['email'],
    		  'url' => $node->field_contact_website[0]['url'],
    		  'phone' => $node->field_contact_phone[0]['value'],
    	  ),
    	  'education_continuum' => $field_edu_continuum[0]['value'],
    	  'fair_usage' => $node->field_fair_usage[0]['value'],
    	);
    	
    	$participant_types = array();
    	
    	foreach($node->field_participant_type as $participant_type) {
        $participant_types[] = $participant_type['value'];
    	}
    	
    	$resource_additions['participant_type'] = $participant_types;
    	
    	$links = array();
    	
    	foreach($node->field_links as $link) {
        $links[] = array(
          'url' => $link['url'],
          'title' => $link['title'],
        );
    	}
    	
    	$resource_additions['participant_type'] = $participant_types;
    
      $resource = array_merge($resource, $resource_additions);
    }
  }
  
  $connection_type = 'POST';
  
  if ($node->is_new == FALSE) {
    $resource['uuid'] = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "node"', $node->nid));
    $connection_type = 'PUT';
  }
    
  $return = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource', $resource, $connection_type);
  
  $return = (object) $return;
  
  if (isset($return->errors)) {
    for($i = 0; $i < count($return->errors); $i++) {
      drupal_set_message($return->errors[$i], 'error');
    }
  } else {
    // update or add uuid to our table.
    $ceen_data = array('oid' => $node->nid, 'object' => 'node', 'uuid' => $return->uuid);
    $update = array();
    
    if ($node->is_new == FALSE && $resource['uuid']) {
      $update = 'oid';
      unset($ceen_data['oid']);
    }
      
    $returnData = drupal_write_record('ceenapi_to_object', $ceen_data, $update);
  }
  
  return $return;
}

/**
 * Takes a user, saves it to API.
 */
 
function ceenclient_save_user($account) {
  /**
   * TODO: Use Content Profile for extra data about our users.
   */
  $api_user_object = array(
    'first_name' => $account->name,
    'last_name' => " ",
    'contact' => array(
      'mail' => $account->mail,
    ), 
  );
  
  $resource_url = '/user';
  $resource_call_type = 'POST';
    
  if ($account->ceen_uuid) {
    $resource_url .= "/" . $account->ceen_uuid;
    $resource_call_type = 'PUT';
  }
  
  $return = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . $resource_url, $api_user_object, $resource_call_type);
  
  if (!$return) {
    drupal_set_message(t("Error saving user to CEERN API"), 'error');
  } else {
    $update = array();
  
    $ceen_data = array('oid' => $account->uid, 'object' => 'user', 'uuid' => $return->uuid);
  
    if ($account->ceen_uuid != NULL) {
      $update = 'oid';
      unset($ceen_data['oid']);
    }
    
    drupal_write_record('ceenapi_to_object', $ceen_data, $update);
  }
}

/**
 * Requests data from CEEN. Adds authentication automatically.
 *
 * @param $uri
 *   URI of request. http://example.com/services/rest/resource/1
 * @param $params
 *   Keyed array of parameters to add to uri.
 *
 * @return
 *   A data object from CEEN.
 */

function ceenclient_resource_call($uri, $params = array(), $method = 'GET') {
  watchdog('CEERN Debugging', 'API Call ' . $method . ' ' . $uri, array(), WATCHDOG_DEBUG);
  $public_key = variable_get('ceenclient_service_public_key', '');
  $private_key = variable_get('ceenclient_service_private_key', '');
  $nonce = uniqid(mt_rand());
  $timestamp = time();
  
  $hash_parameters = array($timestamp, $public_key, $nonce);
  $hash = hash_hmac("sha256", implode(';', $hash_parameters), $private_key);
  
  $url_args = array();
  $data = NULL;
  
  if (strtoupper($method) == 'GET') {
    $url_args += $params;
  } else {
    $data = serialize($params);
  }
  
  $url_args['hash'] = $hash;
  $url_args['timestamp'] = $timestamp;
  $url_args['public_key'] = $public_key;
  $url_args['nonce'] = $nonce;
  
  $headers = array(
    'Content-Type' => 'application/vnd.php.serialized',
    'Accept' => 'application/vnd.php.serialized',
  );
  
  // Automatically add .php to end of uri to ensure data comes back in expected format.
  $request = drupal_http_request($uri . '.php?' . drupal_query_string_encode($url_args), $headers, strtoupper($method), $data);
  watchdog('CEERN Debugging', 'API Return <pre>' . print_r($request, true) . '</pre>', array(), WATCHDOG_DEBUG);
  return unserialize($request->data);
}

/**
 * Implementation of hook_cron().
 */
 
function ceenclient_cron() {
  ceenclient_load_updates();
}

/**
 * Generic function for loading sets of resources from API.
 *
 * To be used primarily with hook_cron(), but could potentially use elsewhere. Action? Page callback to load manually?
 */
 
function ceenclient_load_updates() {
  /**
   * Pseudo: 
   * - Load a value that represents last updated time.
   * - Grab data list from API.
   * - Run through list. Add/update/delete items as necessary.
   */
   
  $last_update = variable_get('ceenclient_api_last_update', 0);
  $max_count = variable_get('ceenclient_api_max_batch_count', 50);
  
  $data = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource', array('status' => 1, 'sort' => 'update', 'update' => $last_update));
  
  //$return = "LAST UPDATE " . $last_update;
  
  foreach ($data['resources'] as $resource) {
    switch ($resource['status']) {
      case 'PUBLISHED':
        $resource_data = ceenclient_resource_call($resource['uri']);
        //$return .= kpr($resource_data, true);
        
        if (is_array($resource_data)) {
          if (!db_result(db_query('SELECT oid FROM {ceenapi_to_object} WHERE uuid = "%s"', $resource_data['uuid']))) {
            $return .= "NEW DATA";
            $node = new stdClass();
            $node->type = 'page';
            module_load_include('inc', 'node', 'node.pages');
            node_object_prepare($node);
            $node->title = $resource_data['title'];
            $node->ceern_from_api = TRUE;
            node_save($node);
            
            db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "node", "%s")', $node->nid, $resource_data['uuid']);
          }
        }
        
        variable_set('ceenclient_api_last_update', $resource['last_updated']);
      break;
      case 'UPDATED':
      
      break;
      case 'DELETED':
        $node = ceenclient_node_load_uuid($resource['uuid']);
        node_delete($node->nid);
        variable_set('ceenclient_api_last_update', $resource['last_updated']);
      break;
      default:
        // TMP, just to make sure we're actually loading valid info.
        // @TODO: Incorporate mapping and whatnot.
      break;
    }
  }
  
  //return kpr($data, true) . $return;
}

/**
 * Implementation of hook_action_info().
 */
 
function ceenclient_action_info() {
  return array(
    'ceenclient_save_to_api_action' => array(
      'description' => t('Save Resource to CEERN API.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'ceenclient_remove_from_api_action' => array(
      'description' => t('Remove resources from CEERN API.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('update', 'delete'),
      ),
    ),
    'ceenclient_save_user_to_api_action' => array(
      'description' => t('Save Users to CEERN API.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'ceenclient_remove_user_from_api_action' => array(
      'description' => t('Remove users from CEERN API.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('update', 'delete'),
      ),
    ),
  );
}

/**
 * Action for saving to api.
 */
 
function ceenclient_save_to_api_action(&$object, $context = array()) {
  if ($object->nid) {
    $resource = node_load($object->nid);
    
    ceenclient_save_node($resource);
  }
}

/**
 * Action for removing from api.
 * TODO: Implement ceenclient_remove_from_api_action.
 */
 
function ceenclient_remove_from_api_action(&$object, $context = array()) {

}

/**
 * Action for saving user to api.
 */

function ceenclient_save_user_to_api_action(&$object, $context = array()) {
  if ($object->uid) {
    $account = user_load($object->uid);
    
    ceenclient_save_user($account);
  }
}

/**
 * Action for removing user from api.
 * TODO: Implement ceenclient_remove_user_from_api_action.
 */
 
function ceenclient_remove_user_from_api_action(&$object, $context = array()) {

}

/**
 * Retrieves ceern uuid for a user. If nothing's passed in, default to current user.
 */
 
function ceenclient_user_uuid($uid = -1) {
  global $user;
  
  if ($uid < 0) {
    $uid = $user->uid;
  }
  
  return db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $uid));
}

/**
 * Retrieves node based on uuid.
 */
 
function ceenclient_node_load_uuid($uuid) {
  $nid = db_result(db_query('SELECT oid FROM {ceenapi_to_object} WHERE uuid = "%s" AND object = "node"', $uuid));
  return node_load($nid);
}