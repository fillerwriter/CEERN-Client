<?php

define('CEEN_MAPPING_INCOMING', 'incoming');

define('CEEN_MAPPING_OUTGOING', 'outgoing');

define('CEENCLIENT_FROM_API', 'from api');

define('CEENCLIENT_FROM_CACHE', 'from cache');

/**
 * Implements hook_menu()
 */

function ceenclient_menu() {
  $items = array();
  
  $items['ajax/ceenclient/credential_status'] = array(
    'title'             => 'CEERN Credentials AJAX check',
    'description'       => 'Access callback to check if credentials are good for CEEN.',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'ceenclient_credential_status_ajax',
    'type' => MENU_CALLBACK,
  );
  
  $items['admin/settings/ceen'] = array(
    'title'             => 'CEERN Credentials',
    'description'       => 'CEEN settings.',
    'access arguments'  => array('administer site configuration'),
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceenclient_admin_settings'),
  );
  
  $items['admin/settings/ceen/credentials'] = array(
    'title'             => 'CEERN Credentials',
    'description'       => 'CEEN settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/settings/ceen/sync'] = array(
    'title' => 'Re-sync',
    'description' => '',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceenclient_admin_resync'),
  );
      
  return $items;
}

/**
 * Loads mapper info from various modules.
 */

function ceenclient_load_mapper_info() {
  $mappers = array();
  
  foreach (module_implements('ceen_mapping') as $module) {
    $function = $module . '_ceen_mapping';
    $data = $function();
    
    $defaults = array(
      'path' => drupal_get_path('module', $module) . '/includes',
      'direction' => CEEN_MAPPING_INCOMING,
      'object' => 'node',      
    );
    
    foreach ($data as $key => $value) {
      $mappers[$key] = array_merge($defaults, $value);
    }
  }
  return $mappers;
}

/**
 * Implements hook_ceen_mapping().
 */
 
function ceenclient_ceen_mapping() {
  return array(
    'CeenIncomingDefault' => array(
      'name' => 'Default',
      'file' => 'IncomingDefault.inc',
      'path' => drupal_get_path('module', 'ceenclient') . '/includes',
      'direction' => CEEN_MAPPING_INCOMING,
      'object' => 'node',
    ),
    'CeenOutgoingDefault' => array(
      'name' => 'Default',
      'file' => 'OutgoingDefault.inc',
      'path' => drupal_get_path('module', 'ceenclient') . '/includes',
      'direction' => CEEN_MAPPING_OUTGOING,
      'object' => 'node',
    ),
    'CeenOutgoingUserDefault' => array(
      'name' => 'Default',
      'file' => 'OutgoingUserDefault.inc',
      'path' => drupal_get_path('module', 'ceenclient') . '/includes',
      'direction' => CEEN_MAPPING_OUTGOING,
      'object' => 'user',
    ),
  );
}

/**
 * Implements hook_menu_alter().
 */
 
function ceenclient_menu_alter(&$form) {
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . $node_type]['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Implements hook_flush_caches().
 */

function ceenclient_flush_caches() {
  return array('cache_ceenclient');
}

/**
 * Page callback for admin.
 */

function ceenclient_admin_settings() {
  $form = array();
  
  $form['ceenclient_service_url'] = array(
    '#type' => (isset($_GET['devel'])) ? 'textfield' : 'value', // only want to display this if it's for development.
    '#title' => t('CEEN Service URL'),
    '#default_value' => variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest'),
  );
  
  $form['ceenclient_service_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Public Key'),
    '#default_value' => variable_get('ceenclient_service_public_key', ''),
  );
  
  $form['ceenclient_service_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Private Key'),
    '#default_value' => variable_get('ceenclient_service_private_key', ''),
  );
  
  $me = ceenclient_resource_call(variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/source/me', array(), 'GET', TRUE);
  
  if (!empty($me['uuid'])) {
    $table_data = array(
      array('Name', $me['name']),
      array('Server ID', $me['uuid']),
    );
    
    $form['ceenclient_data'] = array(
      '#type' => 'markup',
      '#value' => '<h4>' . t('CEERN Information') . '</h4>' . theme('table', array(), $table_data),
    );  
  }
  
  return system_settings_form($form);
}

function ceenclient_admin_resync() {
  $form = array();
  
  $form['help_text'] = array(
    '#type' => 'markup',
    '#value' => '<p>Test</p>',
  );
  
  $form['api_to_local'] = array(
    '#type' => 'submit',
    '#value' => 'Pull From API',
  );
  
  $form['local_to_api'] = array(
    '#type' => 'submit',
    '#value' => 'Push Local Changes',
  );
  
  return $form;
}

/**
 * Depending on the button pushed, we either push existing resources out to the api, or pull resources back in.
 */

function ceenclient_admin_resync_submit($form, &$form_state) {
  switch ($form_state['clicked_button']['#id']) {
    case 'edit-api-to-local':
    
    break;
    case 'edit-local-to-api':
      if (module_exists('spaces')) {
        // Ok, so here's the deal. If we have the spaces module enabled, then we need alter our query to only pull nodes that are part of the current space.
        // Because spaces is capable of making a space out of lots of stuff, and I only need it for spaces/og, this only works for og integration.
        
      }
      else {
        $result = db_query('SELECT * FROM {ceenapi_to_object}');  
      }
    
      while ($item = db_fetch_array($result)) {
        switch ($item['object']) {
          case 'node':
            $node = ceenclient_node_load_uuid($item['uuid']);
            node_save($node);
          break;
          case 'user':
          
          break;
        }
      }
    break;
  }
}

/**
 * Page callback for credential check on admin screen.
 * @TODO: Make a call to the api, check to see if public/private keys are valid.
 */

function ceenclient_credential_status_ajax() {
  drupal_json('test');
}

/**
 * Implementation of hook_user().
 */
 
function ceenclient_user($op, &$edit, &$account, $category = NULL) {
  if (variable_get('ceen_save_to_api_user', 1) == 1) {
    $is_new = FALSE;
    switch ($op) {
      case 'load':
        $account->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $account->uid));
        break;
      case 'form':
        $uuid = ceenclient_user_uuid($account->uid);

        $form = array();
        $form['ceen'] = array(
          '#type' => 'fieldset',
          '#title' => 'Conservation and Education Resource Network',
          '#collapsible' => TRUE,
          '#collapsed' => (empty($uuid)) ? FALSE : TRUE,
        );
        
        if (empty($uuid)) {
          $form['ceen']['warning'] = array(
            '#type' => 'markup',
            '#value' => '<p>This user is not connected to the Conservation Network. Please update the user to get connected.</p>',
          );
          
          $form['ceen']['warning_btn'] = array(
            '#type' => 'submit',
            '#value' => 'Connect to ConEd Network',
          );
        }
        else {
          $form['ceen']['stats'] = array(
            '#type' => 'markup',
            '#value' => '<p><strong>CEEN ID:</strong> ' . $uuid,
          );
        }
        
        return $form;
        break;
      case 'insert':
        $is_new = TRUE;
        // intentional fallthrough.
      case 'update':
        if ($input_mapper = _ceenclient_mapper_factory(variable_get('ceenclient_outgoing_user', 'CeenOutgoingUserDefault'))) {
          $resource = array();
          $input_mapper->process($account, $resource);
          
          $resource_call_type = 'POST';
          $resource_call_uri = variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/user';
          if (!$is_new) {
            $resource_call_type = 'PUT';
            $resource_call_uri .= '/' . $account->ceen_uuid;
          }
          
          if (is_callable(array($input_mapper, 'presave'))) {
            $mapper->presave($account, $resource);
          }
          
          $return_data = ceenclient_resource_call($resource_call_uri, $resource, $resource_call_type);
          
          // keep track of it locally
          db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "user", "%s")', $account->uid, $return_data['uuid']);
          
          if (is_callable(array($input_mapper, 'postsave'))) {
            $resource = array_merge($resource, (array) $return_data);
            $mapper->postsave($input_mapper, $resource);
          }
        }
        break;
      case 'delete':
        if (!isset($account->ceen_from_api)) {
          ceenclient_resource_call(variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/user/' . $account->ceen_uuid, array(), 'DELETE');
          db_query('DELETE FROM {ceenapi_to_object} WHERE oid = %d && object = "user"', $account->uid);
        }
        break;
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */

function ceenclient_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (variable_get('ceen_save_to_api_' . $node->type, FALSE)) {
    $is_new = FALSE;
    switch ($op) {
      case 'load':
        $node->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d && object = "node"', $node->nid));
        break;
      case 'insert':
        $is_new = TRUE;
        // intentional dropthrough.
      case 'update':
        if (!isset($node->ceen_from_api)) {
          // Include mapping classes.
          $map_class = variable_get('ceenclient_outgoing_' . $node->type, '');
          if ($map_class != '') {
            // include base file first.
            include_once('./' . drupal_get_path('module', 'ceenclient') . '/includes/CeenProcess.inc');
            $mappers = ceenclient_load_mapper_info();
            include_once('./' . $mappers[$map_class]['path'] . '/' . $mappers[$map_class]['file']);
            
            $mapper = new $map_class();
            
            if (empty($node->ceen_uuid)) {
              $is_new = TRUE;
            }
            
            $resource = array();
            
            $mapper->process($node, $resource);
            
            $resource_call_type = 'POST';
            $resource_call_uri = variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/resource';
            if (!$is_new) {
              $resource_call_type = 'PUT';
              $resource_call_uri .= '/' . $node->ceen_uuid;
            }
            
            if (is_callable(array($mapper, 'presave'))) {
              $mapper->presave($node, $resource);
            }
            
            $return_data = ceenclient_resource_call($resource_call_uri, $resource, $resource_call_type);
            
            // keep track of it locally
            db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "node", "%s")', $node->nid, $return_data['uuid']);
            
            if (is_callable(array($mapper, 'postsave'))) {
              $resource = array_merge($resource, (array) $return_data);
              $mapper->postsave($node, $resource);
            }      
          }
        }
        break;
      case 'delete':
        if (!isset($node->ceen_from_api)) {
          ceenclient_resource_call(variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/resource/' . $node->ceen_uuid, array(), 'DELETE');
          db_query('DELETE FROM {ceenapi_to_object} WHERE oid = %d && object = "node"', $node->nid);
        }
        break;
    }
  }
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function ceenclient_views_api() {
  return array('api' => 2.0);
}

/**
 * Implementation of hook_form_alter().
 *
 * - Handles adjustment to node type form for ConEd integration.
 * - Handles adjustment to user form for ConEd integration.
 */
function ceenclient_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    // Content type form.
    $form['ceen'] = array(
      '#type' => 'fieldset',
      '#title' => 'ConEd API Integration',
    ); 
    
    $form['ceen']['ceen_save_to_api'] = array(
      '#type' => 'checkbox',
      '#title' => t('Sync with API?'),
      '#description' => 'Should this content type be synced with the general API?',
      '#default_value' => variable_get('ceen_save_to_api_' . $form['#node_type']->type, 0),
    );
    
    $form['ceen']['ceen_additional_parameters'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional Parameters'),
      '#description' => 'Additional Search parameters. Used to filter out resources.',
      '#default_value' => variable_get('ceen_additional_parameters_' . $form['#node_type']->type, ''),
    );
    
    $incoming_options = $outgoing_options = array(
      '' => '<none>',
    );
    
    $mappers = ceenclient_load_mapper_info();
    
    foreach ($mappers as $key => $map) {
      if ($map['object'] != 'node') {
        // Do nothing.
      }
      elseif ($map['direction'] == CEEN_MAPPING_INCOMING) {
        $incoming_options[$key] = $map['name'];      
      } 
      elseif ($map['direction'] == CEEN_MAPPING_OUTGOING) {
        $outgoing_options[$key] = $map['name'];
      }
    }
    
    $form['ceen']['ceenclient_incoming'] = array(
      '#type' => 'select',
      '#title' => t('Incoming'),
      '#options' => $incoming_options,
      '#default_value' => variable_get('ceenclient_incoming_' . $form['#node_type']->type, 'CeenIncomingDefault'),
    );
    
    $form['ceen']['ceenclient_outgoing'] = array(
      '#type' => 'select',
      '#title' => t('Outgoing'),
      '#options' => $outgoing_options,
      '#default_value' => variable_get('ceenclient_outgoing_' . $form['#node_type']->type, 'CeenOutgoingDefault'),
    );
  }
  elseif (preg_match('/_node_form$/', $form_id)) {
    if (variable_get('ceen_save_to_api_'. $form['#node']->type, FALSE)) {
      /**
       * @TODO: Do we want to handle resource types as a custom field on our own, or just rely on CCK?
       */
    }
  }
  elseif ($form_id == 'user_admin_settings') {
    // @TODO: Add variable here for saving users.
    $form['buttons']['#weight'] = 50;
    $form['ceen'] = array(
      '#type' => 'fieldset',
      '#title' => 'ConEd API Integration',
      '#weight' => 20,
    ); 
    
    $form['ceen']['ceen_save_to_api_user'] = array(
      '#type' => 'checkbox',
      '#title' => t('Sync with API?'),
      '#description' => 'Should users be synced with the general API?',
      '#default_value' => variable_get('ceen_save_to_api_user', 0),
    );
    
    $incoming_options = $outgoing_options = array(
      '' => '<none>',
    );
    
    $mappers = ceenclient_load_mapper_info();
    
    foreach ($mappers as $key => $map) {
      if ($map['object'] != 'user') {
        // Do nothing.
      }
      elseif ($map['direction'] == CEEN_MAPPING_INCOMING) {
        $incoming_options[$key] = $map['name'];      
      } 
      elseif ($map['direction'] == CEEN_MAPPING_OUTGOING) {
        $outgoing_options[$key] = $map['name'];
      }
    }
    
    $form['ceen']['ceenclient_incoming_user'] = array(
      '#type' => 'select',
      '#title' => t('Incoming'),
      '#options' => $incoming_options,
      '#default_value' => variable_get('ceenclient_incoming_user', 'CeenIncomingUserDefault'),
    );
    
    $form['ceen']['ceenclient_outgoing_user'] = array(
      '#type' => 'select',
      '#title' => t('Outgoing'),
      '#options' => $outgoing_options,
      '#default_value' => variable_get('ceenclient_outgoing_user', 'CeenOutgoingUserDefault'),
    );
  }
}

/**
 * Requests data from CEEN. Adds authentication automatically.
 *
 * @param $uri
 *   URI of request. http://example.com/services/rest/resource/1
 * @param $params
 *   Keyed array of parameters to add to uri.
 *
 * @return
 *   A data object from CEEN.
 */

function ceenclient_resource_call($uri, $params = array(), $method = 'GET', $clearcache = FALSE) {
  static $ceenclient_api_calls;
  
  $key = $uri . '?' . drupal_query_string_encode($params);
  
  // Check for cache first.
  if ($method == 'GET') {
    if (!$clearcache) {
      if (isset($ceenclient_api_calls[$key])) {
        module_invoke_all('ceen_resource_call', $uri, $params, $method, $ceenclient_api_calls[$key], CEENCLIENT_FROM_CACHE);
        return $ceenclient_api_calls[$key];
      }
      
      if ($data = cache_get($key, 'cache_ceenclient')) {
        module_invoke_all('ceen_resource_call', $uri, $params, $method, $data->data, CEENCLIENT_FROM_CACHE);
        return $data->data;
      }
    }
  }
  
  $public_key = variable_get('ceenclient_service_public_key', '');
  $private_key = variable_get('ceenclient_service_private_key', '');
  $nonce = uniqid(mt_rand());
  $timestamp = time();
  
  $hash_parameters = array($timestamp, $public_key, $nonce);
  $hash = hash_hmac("sha256", implode(';', $hash_parameters), $private_key);
  
  $url_args = array();
  $data = NULL;
  
  if (strtoupper($method) == 'GET') {
    $url_args += $params;
  } 
  else {
    $data = serialize($params);
  }
  
  $url_args['hash'] = $hash;
  $url_args['timestamp'] = $timestamp;
  $url_args['public_key'] = $public_key;
  $url_args['nonce'] = $nonce;
  
  $headers = array(
    'Content-Type' => 'application/vnd.php.serialized',
    'Accept' => 'application/vnd.php.serialized',
  );

  // Automatically add .php to end of uri to ensure data comes back in expected format.
  $request = drupal_http_request($uri . '.php?' . drupal_query_string_encode($url_args), $headers, strtoupper($method), $data);
  
  $return_data = (array) unserialize($request->data);
  
  if (isset($return_data['errors'])) {
    foreach($return_data['errors'] as $error) {
      drupal_set_message('CEEN Error: ' . $error, 'error');
    }
    drupal_set_message('Your changes have not been saved to the Conservation Network.', 'error');
  }
  
  // save to our caches.
  if ($method == 'GET') {
    $ceenclient_api_calls[$key] = $return_data;
    cache_set($key, $return_data, 'cache_ceenclient', CACHE_TEMPORARY);
  }
  
  module_invoke_all('ceen_resource_call', $uri, $params, $method, $return_data, CEENCLIENT_FROM_API);
  
  return $return_data;
}

/**
 * Implementation of hook_cron().
 */
 
function ceenclient_cron() {
   ceenclient_load_updates();
}

/**
 * Generic function for loading sets of resources from API.
 *
 * To be used primarily with hook_cron(), but could potentially use elsewhere. Action? Page callback to load manually?
 */
 
function ceenclient_load_updates() {
  /**
   * Pseudo: 
   * - Load list of content types that need to be synced with api. 
   * - Load a value that represents last updated time.
   * - Grab data list from API for each content type.
   * - Run through list. Add/update/delete items as necessary.
   */
  
  $max_count = variable_get('ceenclient_api_max_batch_count', 50);
  
  $node_types = node_get_types('types');
  
  foreach ($node_types as $node_type) {
    if (variable_get('ceen_save_to_api_' . $node_type->type, 0) == 1) {
      // Include mapping classes.
      $map_class = variable_get('ceenclient_incoming_' . $node_type->type, '');
      
      if (!empty($map_class)) {      
        // include base file first.
        include_once('./' . drupal_get_path('module', 'ceenclient') . '/includes/CeenProcess.inc');
        $mappers = ceenclient_load_mapper_info();
        include_once('./' . $mappers[$map_class]['path'] . '/' . $mappers[$map_class]['file']);
        
        $mapper = new $map_class();
      
        $last_update = variable_get('ceenclient_api_last_update_' . $node_type->type, 0);
        $additional_parameters_string = variable_get('ceen_additional_parameters_' . $node_type->type, '');
        
        $additional_parameters_components = explode('&', $additional_parameters_string);
        $additional_parameters = array();
        
        foreach ($additional_parameters_components as $component) {
          $component_parts = explode('=', $component);
          $additional_parameters[$component_parts[0]] = $component_parts[1];
        }
        
        $default_parameters = array(
          'status' => 1, 
          'sort' => 'update', 
          'update' => $last_update,
        );
        
        $parameters = array_merge($default_parameters, $additional_parameters);
              
        $data = ceenclient_resource_call(variable_get('ceenclient_service_url', 'http://api.resourcecommons.org/services/rest') . '/resource', $parameters);
              
        foreach ($data['resources'] as $resource) {
          $resource_data = ceenclient_resource_call($resource['uri']);
          
          $is_new = FALSE;
          $node = new stdClass();
          
          switch ($resource['status']) {
            case 'PUBLISHED':
              $node->type = $node_type->type;
              module_load_include('inc', 'node', 'node.pages');
              node_object_prepare($node);
                          
              $is_new = TRUE;
              
            // Intentional dropthrough.
            case 'UPDATED':
              if (!$is_new) {
                $node = ceenclient_node_load_uuid($resource['uuid']);
              }
              
              $mapper->process($resource_data, $node);
              $node->ceen_from_api = TRUE; // To keep an endless loop from happening in hook_api.
              
              if (is_callable(array($mapper, 'presave'))) {
                $mapper->presave($resource_data, $node);
              }
              
              node_save($node);
              
              if (is_callable(array($mapper, 'postsave'))) {
                $map->postsave($resource_data, $node);
              }
              
              if ($is_new) {
                db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "node", "%s")', $node->nid, $resource_data['uuid']);
              }
                          
              variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
              break;
            case 'DELETED':
              $node = ceenclient_node_load_uuid($resource['uuid']);
              node_delete($node->nid);
              variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
              break;
          }
        }      
      }
    }
  }
}

/**
 * Retrieves ceern uuid for a user. If nothing's passed in, default to current user.
 */
 
function ceenclient_user_uuid($uid = -1) {
  global $user;
  
  if ($uid < 0) {
    $uid = $user->uid;
  }
  
  return db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $uid));
}

/**
 * Retrieves node based on uuid.
 */
 
function ceenclient_node_load_uuid($uuid) {
  $nid = db_result(db_query('SELECT oid FROM {ceenapi_to_object} WHERE uuid = "%s" AND object = "node"', $uuid));
  return node_load($nid);
}

/**
 * Mapper factory. Ensures that we have the proper files loaded and whatnot.
 *
 * @class
 *   String that corresponds to a class name.
 *
 * @return
 *   Mapper if found, FALSE otherwise.
 */

function _ceenclient_mapper_factory($class_name) {
  $mappers = ceenclient_load_mapper_info();
  if (!empty($mappers[$class_name])) {
    // Load base class first.
    include_once('./' . drupal_get_path('module', 'ceenclient') . '/includes/CeenProcess.inc');
    
    include_once('./' . $mappers[$class_name]['path'] . '/' . $mappers[$class_name]['file']);
    return new $class_name();
  }
  else {
    return FALSE;
  }
}