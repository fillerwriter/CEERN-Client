<?php

/**
 * Implements hook_menu()
 */

function ceenclient_menu() {
  $items = array();
  
  $items['admin/settings/ceen'] = array(
    'title'             => 'CEERN Credentials',
    'description'       => 'CEEN settings.',
    'access arguments'  => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ceenclient_admin_settings'),
  );
  
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . str_replace('_', '-', $node_type) . '/ceern_mapping'] = array(
      'title' => 'CEERN Data Mapping',
      'access callback' => 'ceenclient_mapping_access_callback',
      'access arguments' => array($node_type),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ceenclient_mapping_form', $node_type),
      'type' => MENU_LOCAL_TASK,
      'weight' => 10,
    );
  }
  
  /*$items['ceern_debugging'] = array(
    'title' => 'CEERN Debugging',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'ceenclient_load_updates',
  );
  
  $items['ceern_sanity_check'] = array(
    'title' => 'CEERN Sanity Check',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'ceenclient_sanity_check',
  );*/
      
  return $items;
}

function ceenclient_sanity_check() {
  $data = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource');
  kpr($data);
  
  foreach ($data['resources'] as $resource) {
    kpr(ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource/' . $resource['uuid']));
  }
}

/**
 * Implements hook_menu_alter().
 */
 
function ceenclient_menu_alter(&$form) {
  $node_types = array_keys(node_get_types('types'));
  
  foreach ($node_types as $node_type) {
    $items['admin/content/node-type/' . $node_type]['type'] = MENU_DEFAULT_LOCAL_TASK;
  }
}

/**
 * Implements hook_flush_caches().
 */

function ceenclient_flush_caches() {
  return array('cache_ceenclient');
}

/**
 * Access callback for mapping.
 *
 * @TODO: Add a permission to check on in addition to content type flag.
 */

function ceenclient_mapping_access_callback($node_type) {
  return variable_get('ceern_save_to_api_'. $node_type, 0);
}

function ceenclient_mapping_options() {
  return array(
    '<none>' => '<none>',
    'title' => 'Title',
    'description' => 'Description',
    'type' => 'Resource Type',
    'time_start' => 'Time Start',
    'time_end' => 'Time End',
    'time' => 'Time (handles both start and end, use a date field)',
    'managing_organization' => 'Managing Organization',
    'prerequisites' => 'Prerequisites',
    'location_name' => 'Location Name',
    'location_street' => 'Location Street',
    'location_additional' => 'Location Additional',
    'location_city' => 'Location City',
    'location_state' => 'Location State',
    'location_zip' => 'Location Zip Code',
    'location_country' => 'Location Country',
    'language' => 'Language',
    'contact_name' => 'Contact Name',
    'contact_email' => 'Contact Email',
    'contact_url' => 'Contact URL',
    'contact_phone' => 'Contact Phone Number',
    'education_standards' => 'Education Standards',
    'grade_levels' => 'Grade Levels',
    'education_continuum' => 'Education Continuum',
    'participant_type' => 'Participant Type',
    'links' => 'Links',
    'files' => 'Files',
    'canonical_url' => 'Canonical URL',
  );
}

/**
 * Mapping form callback.
 */
 
function ceenclient_mapping_form(&$form_state, $node_type) {  
  $mapping = variable_get('ceern_mapping_'. $node_type, array());
  
  $mapping_options = ceenclient_mapping_options();
  
  $form['map_title'] = array(
    '#title' => 'Node Title',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['title']) ? $mapping['title'] : '<none>',
  );
  
  $form['map_body'] = array(
    '#title' => 'Node Body',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['body']) ? $mapping['body'] : '<none>',
  );
  
  $form['map_node_created'] = array(
    '#title' => 'Node Created',
    '#type' => 'select',
    '#options' => $mapping_options,
    '#default_value' => isset($mapping['node_created']) ? $mapping['node_created'] : '<none>',
  );
  
  if (module_exists('content')) {  
    $node_type_data = content_types($node_type);
    
    foreach ($node_type_data['fields'] as $field) {
    
      $form['map_' . $field['field_name']] = array(
        '#title' => t($field['widget']['label']),
        '#type' => 'select',
        '#options' => $mapping_options,
        '#default_value' => (isset($mapping[$field['field_name']])) ? $mapping[$field['field_name']] : '<none>',
      );
    }
  }
  
  $form['node_type'] = array(
    '#type' => 'value',
    '#value' => $node_type,
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );

  return $form;
}

/**
 * Submit handler for mapping form.
 */
 
function ceenclient_mapping_form_submit($form, &$form_state) {
  $mapping = array();
  
  foreach ($form_state['values'] as $key => $value) {
    if (preg_match('/^map_/', $key)) {
      $item_name = preg_replace('/^map_/', '', $key);
      $mapping[$item_name] = $value;
    }
  }
    
  variable_set('ceern_mapping_' . $form_state['values']['node_type'], $mapping);
  
  drupal_set_message('Mapping settings saved.');
}

function ceenclient_admin_settings() {
  $form = array();
  
  $form['ceenclient_service_url'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Service URL'),
    '#default_value' => variable_get('ceenclient_service_url', ''),
  );
  
  $form['ceenclient_service_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Public Key'),
    '#default_value' => variable_get('ceenclient_service_public_key', ''),
  );
  
  $form['ceenclient_service_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('CEEN Private Key'),
    '#default_value' => variable_get('ceenclient_service_private_key', ''),
  );
  
  return system_settings_form($form);
}

/**
 * Implementation of hook_user().
 */
 
function ceenclient_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'insert' || $op == 'update') {
    /**
     * TODO: Not sure if this will work once we get content_profile involved, but for now it should.
     */
    $to_api = (array) $account;
    $to_api = array_merge($to_api, $edit);
    unset($to_api['pass']);
    $to_api = (object) $to_api;
    ceenclient_save_user($to_api);
  }
  elseif ($op == 'delete') {
    ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/user/' . $account->ceen_uuid, NULL, 'DELETE');
  } elseif ($op == 'load') {
    $account->ceen_uuid = db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $account->uid));
  }
}

/**
 * Implementation of hook_nodeapi().
 */

function ceenclient_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if (!isset($node->from_api) && variable_get('ceern_save_to_api_'. $node->type, FALSE) != FALSE && empty($node->ceern_from_api)) {
        //ceenclient_save_node($node);
      } else {

      }
    break;
    case 'delete':
    
    break;
  }
}

/**
* Implementation of hook_views_api().
* @return Array with Views API version.
*/
function ceenclient_views_api() {
  return array('api' => 2.0);
}

/**
 * Implementation of hook_form_alter().
 */
function ceenclient_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'node_type_form' && isset($form['identity']['type'])) {
    // Content type form.
    $form['ceern'] = array(
      '#type' => 'fieldset',
      '#title' =>'ConEd API Integration',
    ); 
    
    $form['ceern']['ceern_save_to_api'] = array(
      '#type' => 'checkbox',
      '#title' => t('Sync with API?'),
      '#description' => 'Should this content type be synced with the general API?',
      '#default_value' => variable_get('ceern_save_to_api_' . $form['#node_type']->type, 0),
    );
    
    $form['ceern']['ceern_additional_parameters'] = array(
      '#type' => 'textfield',
      '#title' => t('Additional Parameters'),
      '#description' => 'Additional Search parameters. Used to filter out resources.',
      '#default_value' => variable_get('ceern_additional_parameters_' . $form['#node_type']->type, 0),
    );
  }
  else if (preg_match('/_node_form$/', $form_id)) {
    if (variable_get('ceern_save_to_api_'. $form['#node']->type, FALSE)) {
      $form['ceern_type'] = array(
        '#type' => 'fieldset',
        '#title' => t('CEERN'),
        '#collapsible' => TRUE,
      );
      
      $resource_types_raw = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource_types');
      $resource_types = array();
      foreach($resource_types_raw as $key => $major_group) {
        $set = array();
        foreach($major_group['children'] as $key_2 => $minor_group) {
          $set[$minor_group['name']] = $minor_group['name'];
        }
        $resource_types[$major_group['name']] = $set;
      }
      
      // @TODO: Save the resource type to our database.
      $form['ceern_type']['resource_type'] = array(
        '#type' => 'select',
        '#title' => t('Resource Type'),
        '#options' => $resource_types,
      );
    }
  }
}

/**
 * Takes a user, saves it to API.
 *
 * @param $account
 *   User account object.
 */
 
function ceenclient_save_user($account) {
  /**
   * TODO: Use Content Profile for extra data about our users.
   */
  $api_user_object = array(
    'first_name' => $account->name,
    'last_name' => " ",
    'contact' => array(
      'mail' => $account->mail,
    ), 
  );
  
  $resource_url = '/user';
  $resource_call_type = 'POST';
    
  if ($account->ceen_uuid) {
    $resource_url .= "/" . $account->ceen_uuid;
    $resource_call_type = 'PUT';
  }
  
  $return = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . $resource_url, $api_user_object, $resource_call_type);
  
  if (!$return) {
    drupal_set_message(t("Error saving user to CEERN API"), 'error');
  } else {
    $update = array();
  
    $ceen_data = array('oid' => $account->uid, 'object' => 'user', 'uuid' => $return->uuid);
  
    if ($account->ceen_uuid != NULL) {
      $update = 'oid';
      unset($ceen_data['oid']);
    }
    
    drupal_write_record('ceenapi_to_object', $ceen_data, $update);
  }
}

/**
 * Requests data from CEEN. Adds authentication automatically.
 *
 * @param $uri
 *   URI of request. http://example.com/services/rest/resource/1
 * @param $params
 *   Keyed array of parameters to add to uri.
 *
 * @return
 *   A data object from CEEN.
 */

function ceenclient_resource_call($uri, $params = array(), $method = 'GET') {
  static $ceenclient_api_calls;
  watchdog('CEERN Debugging', 'API Call ' . $method . ' ' . $uri . " <pre>" . print_r($params, true) . "</pre>", array(), WATCHDOG_DEBUG);
  
  $key = $uri . '?' . drupal_query_string_encode($params);
  
  // Check for cache first.
  if ($method == 'GET') {
    if (isset($ceenclient_api_calls[$key])) {
      return $ceenclient_api_calls[$key];
    }
    
    if ($data = cache_get($key, 'cache_ceenclient')) {
      return $data->data;
    }
  }
  
  $public_key = variable_get('ceenclient_service_public_key', '');
  $private_key = variable_get('ceenclient_service_private_key', '');
  $nonce = uniqid(mt_rand());
  $timestamp = time();
  
  $hash_parameters = array($timestamp, $public_key, $nonce);
  $hash = hash_hmac("sha256", implode(';', $hash_parameters), $private_key);
  
  $url_args = array();
  $data = NULL;
  
  if (strtoupper($method) == 'GET') {
    $url_args += $params;
  } else {
    $data = serialize($params);
  }
  
  $url_args['hash'] = $hash;
  $url_args['timestamp'] = $timestamp;
  $url_args['public_key'] = $public_key;
  $url_args['nonce'] = $nonce;
  
  $headers = array(
    'Content-Type' => 'application/vnd.php.serialized',
    'Accept' => 'application/vnd.php.serialized',
  );

  // Automatically add .php to end of uri to ensure data comes back in expected format.
  $request = drupal_http_request($uri . '.php?' . drupal_query_string_encode($url_args), $headers, strtoupper($method), $data);
  watchdog('CEERN Debugging', 'API Return <pre>' . print_r($request, true) . '</pre>', array(), WATCHDOG_DEBUG);
  
  $return_data = unserialize($request->data);
  
  // save to our caches.
  if ($method == 'GET') {
    $ceenclient_api_calls[$key] = $return_data;
    cache_set($key, $return_data, 'cache_ceenclient', CACHE_TEMPORARY);
  }
  
  return $return_data;
}

/**
 * Implementation of hook_cron().
 */
 
function ceenclient_cron() {
  ceenclient_load_updates();
}

/**
 * Generic function for loading sets of resources from API.
 *
 * To be used primarily with hook_cron(), but could potentially use elsewhere. Action? Page callback to load manually?
 */
 
function ceenclient_load_updates() {
  /**
   * Pseudo: 
   * - Load list of content types that need to be synced with api. 
   * - Load a value that represents last updated time.
   * - Grab data list from API for each content type.
   * - Run through list. Add/update/delete items as necessary.
   */
  
  $max_count = variable_get('ceenclient_api_max_batch_count', 50);
  
  $node_types = node_get_types('types');
  
  foreach ($node_types as $node_type) {
    if (variable_get('ceern_save_to_api_' . $node_type->type, 0) == 1) {
      $last_update = variable_get('ceenclient_api_last_update_' . $node_type->type, 0);
      $additional_parameters_string = variable_get('ceern_additional_parameters_' . $node_type->type, '');
      
      $additional_parameters_components = explode('&', $additional_parameters_string);
      $additional_parameters = array();
      
      foreach($additional_parameters_components as $component) {
        $component_parts = explode('=', $component);
        $additional_parameters[$component_parts[0]] = $component_parts[1];
      }
      
      $default_parameters = array(
        'status' => 1, 
        'sort' => 'update', 
        'update' => $last_update
      );
      
      $parameters = array_merge($default_parameters, $additional_parameters);
            
      $data = ceenclient_resource_call(variable_get('ceenclient_service_url', '') . '/resource', $parameters);
            
      foreach ($data['resources'] as $resource) {
        $resource_data = ceenclient_resource_call($resource['uri']);
        
        switch ($resource['status']) {
          case 'PUBLISHED':
            $node = new stdClass();
            $node->type = $node_type->type;
            module_load_include('inc', 'node', 'node.pages');
            node_object_prepare($node);
            ceenclient_resource_to_node($resource_data, $node);
            node_save($node);
            
            db_query('INSERT INTO {ceenapi_to_object} (oid, object, uuid) VALUES (%d, "node", "%s")', $node->nid, $resource_data['uuid']);
            variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
          break;
          case 'UPDATED':
          
          break;
          case 'DELETED':
            $node = ceenclient_node_load_uuid($resource['uuid']);
            node_delete($node->nid);
            variable_set('ceenclient_api_last_update_' . $node_type->type, $resource['last_updated']);
          break;
        }
      }
    }
  }
}

/**
 * Converts a node object into a resource array.
 *
 * @param $node
 *   - node object. 
 */

function ceenclient_node_to_resource($node) {
  if (is_object($node) && isset($node->type)) {
    $resource = array();
    if (module_exists('ygo_event') && $node->type == 'event') {
      $resource = array(
        'title' => $node->title,
        'description' => $node->body,
        'type' => 'Event',
        'time' => array(
          'start' => $node->field_event_time[0]['value'],
          'end' => $node->field_event_time[0]['value2'],
        ),
        'location' => array(
          'name' => $node->field_event_location[0]['name'],
          'street' => $node->field_event_location[0]['street'],
          'additional' => $node->field_event_location[0]['additional'],
          'city' => $node->field_event_location[0]['city'],
          'state' => $node->field_event_location[0]['province'],
          'zip' => $node->field_event_location[0]['postal_code'],
        ),
        'contact' => array(
          'name' => $node->field_contact_name[0]['value'],
          'email' => $node->field_contact_email[0]['email'],
          'url' => $node->field_contact_website[0]['url'],
          'phone' => $node->field_contact_phone[0]['value'],
        ),
      ); 
      return $resource;
    } elseif (module_exists('ceern_resource_feature') && $node->type == 'ceen_resource') {
      $resource = array(
        'title' => $node->title,
        'description' => $node->body,
        'type' => $node->field_resource_type[0]['value'],
        'time' => array(
          'start' => $node->field_time[0]['value'],
          'end' => $node->field_time[0]['value2'],
        ),
        'prerequisites' => $node->field_prerequisites[0]['value'],
        'location' => array(
          'name' => $node->field_location[0]['name'],
          'street' => $node->field_location[0]['street'],
          'additional' => $node->field_location[0]['additional'],
          'city' => $node->field_location[0]['city'],
          'state' => $node->field_location[0]['province'],
          'zip' => $node->field_location[0]['postal_code'],
        ),
        'language' => $node->field_lang[0]['value'],
        'contact' => array(
          'name' => $node->field_contact_name[0]['value'],
          'email' => $node->field_contact_email[0]['email'],
          'url' => $node->field_contact_website[0]['url'],
          'phone' => $node->field_contact_phone[0]['value'],
        ),
        'education_continuum' => $node->field_edu_continuum[0]['value'],
        'fair_usage' => $node->field_fair_usage[0]['value'],
      );
      
      return $resource;
    } else {    
      $fields = array();
      if (module_exists('content')) {
        $fields = content_fields(NULL, $node->type);
      }
    
      $mapping = variable_get('ceern_mapping_' . $node_type->type, '');
    
      $resource = array();
    
      foreach ($mapping as $map_key => $map_value) {
        if ($map_value != '<none>') {
          /**
           * Check special cases first.
           */
          if ($map_key == 'title' || $map_key == 'body') {
            _ceenclient_resource_object_map($resource, $node, $map_key, $map_value);
          } elseif ($map_key == 'node_created') {
            _ceenclient_resource_object_map($resource, $node, $map_key, $map_value);
          } elseif (module_exists('content')) {
            if (!empty($fields[$map_key]['type'])) {
              switch ($fields[$map_key]['type']) {
                default:
                  if ($fields[$map_key]['multiple']) {
                    $resource[$map_value] = array();
                    foreach ($node->$map_key as $key) {
                      array_push($resource[$map_value], $key['value']);
                    }
                  } else {
                    $resource[$map_value] = $node->$map_key[0]['value'];
                  }
                break;
              }
            }      
          }
        }
      }
      
      return $resource;
    }
  }
}

/**
 * Helper function for node_to_resource.
 */

function _ceenclient_resource_object_map(&$resource, $node, $map_key, $map_value) {
  if (strpos($map_value, 'contact_') !== FALSE) {
    $value = str_replace('contact_', '', $map_value);
    $resource['contact'][$value] = $node->$map_key;
  } elseif (strpos($map_value, 'location_') !== FALSE) {
    $value = str_replace('location_', '', $map_value);
    $resource['location'][$value] = $node->$map_key;
  } else {
    $resource[$map_value] = $node->$map_key;
  }
}

/**
 * Converts a resource array into a node.
 *
 * @param $resource
 *   - 
 * @param &$node
 *   -
 */
 
function ceenclient_resource_to_node($resource, &$node) {
  // cast resource to array first.
  $resouce = (array) $resource;
  kpr("INITIAL DATA: " . $resource['title']);
  kpr($node);
  kpr($resource);

  // make sure we're looking at an actual node.
  if (is_object($node) && isset($node->type)) {
    /**
     * We have some legacy content types that we're using for
     * various projects. This will ensure we have proper mapping
     * for both our custom maps and the legacy content. We should 
     * remove them once mapping is fully working.
     */
  
    if (module_exists('ygo_event') && $node->type == 'event') {
      $node->title = $resource['title'];
      $node->body = $resource['description'];
      $node->field_event_time = array(
        0 => array(
          'value' => $resource['time']['start'],
          'value2' => $resource['time']['end'],
        ),
      );
      $node->field_event_location = array(
        0 => array(
          'name' => $resource['location']['name'],
          'street' => $resource['location']['street'],
          'additional' => $resource['location']['additional'],
          'city' => $resource['location']['city'],
          'providence' => $resource['location']['state'],
          'postal_code' => $resource['location']['zip'],
        ),
      );
      $node->field_contact_name = array(
        0 => array(
          'value' => $resource['contact']['name'],
        ),
      );
      $node->field_contact_email = array(
        0 => array(
          'email' => $resource['contact']['email'],
        ),
      );
      $node->field_contact_website = array(
        0 => array(
          'url' => $resource['contact']['url'],
        ),
      );
      $node->field_contact_phone = array(
        0 => array(
          'value' => $resource['contact']['phone'],
        ),
      );
      
      return $node;  
    
    } elseif (module_exists('ceern_resource_feature') && $node->type == 'ceen_resource') {
    
      $node->title = $resource['title'];
      $node->body = $resource['description'];
      $node->field_resource_type = array(
        0 => array(
          'value' => $resource['type'],
        ),
      );
      $node->field_time = array(
        0 => array(
          'value' => $resource['time']['start'],
          'value2' => $resource['time']['end'],
        ),
      );
      $node->field_prerequisites = array(
        0 => array(
          'value' => $resource['prerequisites'],
        ),
      );
      $node->field_location = array(
        0 => array(
          'name' => $resource['location']['name'],
          'street' => $resource['location']['street'],
          'additional' => $resource['location']['additional'],
          'city' => $resource['location']['city'],
          'state' => $resource['location']['state'],
          'zip' => $resource['location']['zip'],
        ),
      );
      $node->field_lang = array(
        0 => array(
          'value' => $resource['language'],
        ),
      );
      $node->field_contact_name = array(
        0 => array(
          'value' => $resource['contact']['name'],
        ),
      );
      $node->field_contact_email = array(
        0 => array(
          'email' => $resource['contact']['email'],
        ),
      );
      $node->field_contact_website = array(
        0 => array(
          'url' => $resource['contact']['url'],
        ),
      );
      $node->field_contact_phone = array(
        0 => array(
          'value' => $resource['contact']['phone'],
        ),
      );
      $node->field_edu_continuum = array(
        0 => array(
          'value' => $resource['education_continuum'],
        ),
      );
      $node->field_fair_usage = array(
        0 => array(
          'value' => $resource['fair_usage'],
        ),
      );
      
      return $node;
    } else {
      /**
       * Custom mapping. This will eventually be the entire function call.
       */
       
      $mapping = variable_get('ceern_mapping_' . $node->type, '');
      
      $fields = array();

      if (module_exists('content')) {
        $fields = content_fields(NULL, $node->type);
      }      
   
      foreach ($mapping as $map_key => $map_value) {
        if ($map_value != '<none>') {
        
          /**
           * Load data. Since it's not a flat array, we need to ensure we're pointing to
           * the right data source.
           */
           
          $resource_datum = NULL;
          
          if (isset($resource[$map_value])) {
            $resource_datum = $resource[$map_value];
          } elseif (strpos($map_value, 'contact') !== FALSE) {
            $key = str_replace('contact_', '', $map_value);
            $resource_datum = $resource['contact'][$key];
          } elseif (strpos($map_value, 'location') !== FALSE) {
            $key = str_replace('location_', '', $map_value);
            $resource_datum = $resource['location'][$key];
          }
          
          /**
           * Check for special cases first.
           */

          if ($map_key == 'title' || $map_key == 'body') {
            $node->$map_key = $resource_datum;
          } elseif ($map_key == 'node_created') {
            $node->created = $resource_datum;
          } elseif (module_exists('content')) {
            if (!empty($fields[$map_key])) {
              switch ($fields[$map_key]['type']) {
                case 'email':
                  $node->$map_key = array(
                    0 => array(
                      'email' => $resource_datum,
                    ),
                  );
                break;
                case 'link':
                  $node->$map_key = array(
                    0 => array(
                      'url' => $resource_datum,
                    ),
                  );
                break;
                case 'date':
                  $node->$map_key = array(
                    0 => array(
                      'start' => $resource_datum['start'],
                      'end' => $resource_datum['end'],
                    ),
                  );
                break;
                case 'location':
                  $node->$map_key = array(
                    0 => array(
                      'name' => $resource_datum['location']['name'],
                      'street' => $resource_datum['location']['street'],
                      'additional' => $resource_datum['location']['additional'],
                      'city' => $resource_datum['location']['city'],
                      'state' => $resource_datum['location']['state'],
                      'zip' => $resource_datum['location']['zip'],
                    ),
                  );
                break;
                default:
                  if ($fields[$map_key]['multiple']) {
                    // @TODO: Add support for multiple variables.
                    $node->$map_key = array();
                    
                    $values = array();
                    
                    if (is_array($resource_datum)) {
                      $values = $resource_datum;
                    } else {
                      // assume we're splitting on commas
                      $values = explode(',', $resource_datum);
                    }
                    
                    foreach ($values as $value) {
                      array_push($node->map_key, $value);
                    }
                  } else {
                    $value = $resource_datum;
                    
                    if (is_array($value)) {
                      $value = implode(',', $value);
                    }
                    $node->$map_key = array(
                      0 => array(
                        'value' => $value,
                      ),
                    );
                  }
                break;
              }
            }
          }
        }
      }
        
      return $node;  
    }
  }
}

/**
 * Generate a node based on mapping settings. This function is used primarily on cron.
 *
 * @param $node_type
 *   - node content type object from node_get_types().
 * @param $resource_data
 *   - resource data from CEERN API.
 */

function ceenclient_generate_node($node_type, $resource_data) {
  $node = new stdClass();
  $node->type = $node_type->type;
  module_load_include('inc', 'node', 'node.pages');
  node_object_prepare($node);
  
  $fields = array();
  if (module_exists('content')) {
    $fields = content_fields(NULL, $node->type);
  }

  $mapping = variable_get('ceern_mapping_' . $node_type->type, '');

  foreach ($mapping as $map_key => $map_value) {
    if ($map_value != '<none>') {
    
      /**
       * Load data. Since it's not a flat array, we need to ensure we're pointing to
       * the right data source.
       */
       
      $resource_datum = NULL;
      
      if (isset($resource_data[$map_value])) {
        $resource_datum = $resource_data[$map_value];
      } elseif (strpos($map_value, 'contact') !== FALSE) {
        $key = str_replace('contact_', '', $map_value);
        $resource_datum = $resource_data['contact'][$key];
      } elseif (strpos($map_value, 'location') !== FALSE) {
        $key = str_replace('location_', '', $map_value);
        $resource_datum = $resource_data['location'][$key];
      }
      
      /**
       * Check for special cases first.
       */
      if ($map_key == 'title' || $map_key == 'body') {
        $node->$map_key = $resource_datum;
      } elseif ($map_key == 'node_created') {
        $node->created = $resource_datum;
      } elseif (module_exists('content')) {
        if (!empty($fields[$map_key])) {
          switch ($fields[$map_key]['type']) {
            case 'email':
              $node->$map_key = array(
                0 => array(
                  'email' => $resource_datum,
                ),
              );
            break;
            case 'link':
              $node->$map_key = array(
                0 => array(
                  'url' => $resource_datum,
                ),
              );
            break;
            default:
              if ($fields[$map_key]['multiple']) {
                // @TODO: Add support for multiple variables.
                $node->$map_key = array();
                
                $values = array();
                
                if (is_array($resource_datum)) {
                  $values = $resource_datum;
                } else {
                  // assume we're splitting on commas
                  $values = explode(',', $resource_datum);
                }
                
                foreach ($values as $value) {
                  array_push($node->map_key, $value);
                }
              } else {
                $node->$map_key = array(
                  0 => array(
                    'value' => $resource_datum,
                  ),
                );
              }
            break;
          }
        }
      }
    }
  }
  
  $node->from_api = TRUE;
  
  return $node;
}

/**
 * Implementation of hook_action_info().
 */
 
function ceenclient_action_info() {
  return array(
    'ceenclient_save_to_api_action' => array(
      'description' => t('Save Resource to CEERN API.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'ceenclient_remove_from_api_action' => array(
      'description' => t('Remove resources from CEERN API.'),
      'type' => 'node',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('update', 'delete'),
      ),
    ),
    'ceenclient_save_user_to_api_action' => array(
      'description' => t('Save Users to CEERN API.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('insert', 'update'),
      ),
    ),
    'ceenclient_remove_user_from_api_action' => array(
      'description' => t('Remove users from CEERN API.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(
        'nodeapi' => array('update', 'delete'),
      ),
    ),
  );
}

/**
 * Action for saving to api.
 * @TODO: Reimplement with new functions.
 */
 
function ceenclient_save_to_api_action(&$object, $context = array()) {
  if ($object->nid) {
    $resource = node_load($object->nid);
    
    //ceenclient_save_node($resource);
  }
}

/**
 * Action for removing from api.
 * @TODO: Implement ceenclient_remove_from_api_action.
 */
 
function ceenclient_remove_from_api_action(&$object, $context = array()) {

}

/**
 * Action for saving user to api.
 */

function ceenclient_save_user_to_api_action(&$object, $context = array()) {
  if ($object->uid) {
    $account = user_load($object->uid);
    
    ceenclient_save_user($account);
  }
}

/**
 * Action for removing user from api.
 * @TODO: Implement ceenclient_remove_user_from_api_action.
 */
 
function ceenclient_remove_user_from_api_action(&$object, $context = array()) {

}

/**
 * Retrieves ceern uuid for a user. If nothing's passed in, default to current user.
 */
 
function ceenclient_user_uuid($uid = -1) {
  global $user;
  
  if ($uid < 0) {
    $uid = $user->uid;
  }
  
  return db_result(db_query('SELECT uuid FROM {ceenapi_to_object} WHERE oid = %d AND object = "user"', $uid));
}

/**
 * Retrieves node based on uuid.
 */
 
function ceenclient_node_load_uuid($uuid) {
  $nid = db_result(db_query('SELECT oid FROM {ceenapi_to_object} WHERE uuid = "%s" AND object = "node"', $uuid));
  return node_load($nid);
}